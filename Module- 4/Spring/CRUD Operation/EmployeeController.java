package com.example.controller;

import com.example.dao.EmployeeRepository;
import com.example.model.Employee;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/employee")
public class EmployeeController {

    @Autowired
    private EmployeeRepository employeeRepository;

    // --- Authentication Check Utility ---
    private String checkLogin(HttpSession session) {
        if (session.getAttribute("userName") == null) {
            // Redirect to Login Page if not logged in (General Requirement)
            return "redirect:/login"; 
        }
        return null; // Login is valid
    }

    // --- 0. Menu Page ---
    @GetMapping("/menu")
    public String showMenu(HttpSession session) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        return "menu"; // menu.jsp: Contains all 5 links
    }

    // --- 1. ADD Employee (Create) ---
    @GetMapping("/add")
    public String showAddForm(HttpSession session, Model model) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        // Pass an empty Employee object to bind form data
        model.addAttribute("employee", new Employee());
        return "add_employee_form"; 
    }

    @PostMapping("/add")
    public String addEmployee(@Valid @ModelAttribute("employee") Employee employee, 
                              BindingResult result, 
                              HttpSession session, 
                              RedirectAttributes redirectAttributes) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;

        // Perform necessary validations (JSR 303 annotations handle basic checks)
        if (result.hasErrors()) {
            return "add_employee_form";
        }
        
        // ID is automatically generated by JPA (@GeneratedValue)
        employeeRepository.save(employee);
        
        redirectAttributes.addFlashAttribute("message", "Employee added successfully! ID: " + employee.getId());
        return "redirect:/employee/menu";
    }

    // --- 2. DELETE Employee (Delete) ---
    @GetMapping("/delete-form")
    public String showDeleteForm(HttpSession session) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        return "delete_employee_id"; // Form to enter ID
    }

    @PostMapping("/delete-confirm")
    public String deleteConfirm(@RequestParam("id") Integer id, HttpSession session, Model model) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        Optional<Employee> employeeOpt = employeeRepository.findById(id);

        if (employeeOpt.isEmpty()) {
            model.addAttribute("error", "Error: Employee with ID " + id + " not found.");
            return "delete_employee_id";
        }
        
        model.addAttribute("employee", employeeOpt.get());
        return "delete_employee_confirm"; // Shows details and final delete button
    }
    
    @PostMapping("/delete")
    public String deleteEmployee(@RequestParam("id") Integer id, 
                                 HttpSession session, 
                                 RedirectAttributes redirectAttributes) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        employeeRepository.deleteById(id);
        redirectAttributes.addFlashAttribute("message", "Employee ID " + id + " successfully deleted.");
        return "redirect:/employee/menu";
    }

    // --- 3. MODIFY Personal Details (Update) ---
    @GetMapping("/modify")
    public String showModifyForm(HttpSession session, Model model) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        // Retrieve userId from the session (NOTE: Assuming session stores the Employee ID, not User credentials ID)
        Integer employeeId = (Integer) session.getAttribute("employeeId"); 
        
        if (employeeId == null) {
            model.addAttribute("error", "Error: User ID not found in session. Please log in again.");
            return "redirect:/login"; 
        }

        Optional<Employee> employeeOpt = employeeRepository.findById(employeeId);
        
        if (employeeOpt.isEmpty()) {
            model.addAttribute("error", "Error: Employee data not found for session ID.");
            return "redirect:/employee/menu";
        }
        
        model.addAttribute("employee", employeeOpt.get());
        return "modify_personal_details"; // Displays current details, allows modification of City, Email, Mobile
    }

    @PostMapping("/modify")
    public String modifyPersonalDetails(@ModelAttribute("employee") Employee submittedEmployee,
                                        HttpSession session, 
                                        RedirectAttributes redirectAttributes) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        Integer employeeId = (Integer) session.getAttribute("employeeId");
        if (employeeId == null) return "redirect:/login";

        Optional<Employee> currentEmployeeOpt = employeeRepository.findById(employeeId);
        if (currentEmployeeOpt.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "Update failed: Employee record missing.");
            return "redirect:/employee/menu";
        }
        
        Employee existingEmployee = currentEmployeeOpt.get();
        
        // Update ONLY the allowed fields (City, Email Id, Mobile No)
        existingEmployee.setCity(submittedEmployee.getCity());
        existingEmployee.setEmailId(submittedEmployee.getEmailId());
        existingEmployee.setMobileNo(submittedEmployee.getMobileNo());
        
        employeeRepository.save(existingEmployee);
        
        redirectAttributes.addFlashAttribute("message", "Personal details successfully updated!");
        return "redirect:/employee/menu";
    }

    // --- 4. SELECT Employee by Id (Read Single) ---
    @GetMapping("/select-id-form")
    public String showSelectIdForm(HttpSession session) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        return "select_employee_id"; // Form to enter ID
    }

    @GetMapping("/select-id")
    public String selectEmployeeById(@RequestParam("id") Integer id, HttpSession session, Model model) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        Optional<Employee> employeeOpt = employeeRepository.findById(id);

        if (employeeOpt.isEmpty()) {
            model.addAttribute("error", "Error: Employee with ID " + id + " not found.");
            return "select_employee_id";
        }
        
        model.addAttribute("employee", employeeOpt.get());
        return "employee_details"; // Displays the single employee details
    }

    // --- 5. SELECT ALL Employee (Read All) ---
    @GetMapping("/select-all")
    public String selectAllEmployees(HttpSession session, Model model) {
        String redirect = checkLogin(session);
        if (redirect != null) return redirect;
        
        List<Employee> employees = employeeRepository.findAll();
        
        model.addAttribute("employees", employees);
        return "select_all_employees"; // Displays all employee details in a table
    }
}